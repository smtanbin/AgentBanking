const myHeaders = new Headers()
myHeaders.append("Content-Type", "application/json"),
  myHeaders.append("Access-Control-Allow-Origin", "*")
const timeline = async () => {
  const a = `${apiserver}/timeline`
  try {
    await fetch(a, { method: "GET", headers: myHeaders, redirect: "follow" })
      .then((a) => a.json())
      .then((a) => {
        0 === a.length
          ? (document.getElementById("timeline").innerHTML = `
			<tr>
			<td colspan="14"> No Data Found!</td>
			</tr>`)
          : a.map(
              ({
                TRANS_NO: a,
                TRANS_DATE: b,
                TRANS_FROM: c,
                TRANS_TO: d,
                REF_PHONE: e,
                PAY_AMT: f,
                MERCHANT_SNAME: g,
                PARTICULAR: h,
                FROM_GL: i,
                TO_GL: j,
              }) => {
                const k = document.getElementById("timeline")
                let l = document.createElement("tr"),
                  m = document.createElement("td")
                m.classList.add("text-tiny"),
                  m.classList.add("text-clip"),
                  l.appendChild(m),
                  (m.innerText = moment(b).startOf("minute").fromNow()),
                  (m = document.createElement("td"))
                let n = document.createElement("button")
                n.classList.add("btn"),
                  n.classList.add("btn-link"),
                  n.classList.add("text-tiny"),
                  (n.onclick = function () {
                    model(a)
                  }),
                  (n.innerText = a),
                  m.appendChild(n),
                  l.appendChild(m),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  l.appendChild(m),
                  (m.innerText = c),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  m.classList.add("text-clip"),
                  l.appendChild(m),
                  (m.innerText = i),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  l.appendChild(m),
                  (m.innerText = d),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  m.classList.add("text-clip"),
                  l.appendChild(m),
                  (m.innerText = j),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  l.appendChild(m),
                  (m.innerText = f.toLocaleString("en-BD", {
                    maximumFractionDigits: 2,
                    style: "currency",
                    currency: "BDT",
                  })),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  l.appendChild(m),
                  (m.innerText = g),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  l.appendChild(m),
                  (m.innerText = e),
                  (m = document.createElement("td")),
                  m.classList.add("text-tiny"),
                  l.appendChild(m),
                  (m.innerText = h),
                  k.appendChild(l)
              }
            )
      })
  } catch (a) {
    document.getElementById("timeline").innerHTML = `
	<tr>
	<td colspan="14"> Error! <br/> Massage: ${a}</td>

	</tr>`
  }
  document.getElementById("loading").remove()
}
timeline()
const model = async (a) => {
    const b = `${apiserver}/trsearch`,
      c = JSON.stringify({ key: `${a}` })
    await fetch(b, {
      method: "POST",
      headers: myHeaders,
      body: c,
      redirect: "follow",
    })
      .then((a) => a.json())
      .then((a) => {
        ;(document.getElementById("output").innerHTML = a
          .map((a) => {
            const {
              TRANS_NO: b,
              TRANS_DATE: c,
              TRANS_FROM: d,
              FROM_AC_TYPE_CODE: e,
              FROM_GL: f,
              FROM_GL_NAME: g,
              TRANS_TO: h,
              TO_AC_TYPE_CODE: i,
              TO_GL: j,
              TO_GL_NAME: k,
              ENTRY_USER: l,
              ENTRY_DATE: m,
              CHECK_USER: n,
              CHECK_DATE: o,
              UPDATE_USER: p,
              UPDATE_DATE: q,
              PAY_AMT: r,
              MSG_AMT: s,
              SCHARGE_AMT: t,
              VAT_AMT: u,
              BILLNO: v,
              REF_PHONE: w,
              MERCHANT_SNAME: x,
              PARTICULAR: y,
              CODE: z,
              HOTKEY: A,
              NOTE: B,
            } = a
            return `<div class="modal-header">
				<a onclick="closeModel()" class="btn btn-link float-right text-error" aria-label="Close"><i class="icon icon-cross"></i> Close</a>
				<a onclick="printArea()" class="btn btn-link float-right"><i class="icon icon-download"></i> Download</a>
	<div id="modal-title" class="modal-title text-primary h5">${b}</div>
	</div>
	<div class="modal-body">
	<div class="content">
	<h6 class="text-primary h6">Transaction Info</h6>
		<p>
		<b>Transaction No:</b> ${b}<br/>
		<b>Account:</b> ${d} <i class="icon icon-forward"></i> ${h}<br/>
		<b>Account Type:</b> ${e} <i class="icon icon-forward"></i> ${i}<br/>
		<b>Genaral Ledger:</b> ${f} <i class="icon icon-forward"></i> ${j}<br/>
		<b>Genaral Ledger No:</b> ${g} <i class="icon icon-forward"></i> ${k}<br/>
		</p>
		<h6 class="text-primary h6">Amount</h6>
		<p>
		<b>Total Amount:</b> ${r.toLocaleString("en-BD", {
      maximumFractionDigits: 2,
      style: "currency",
      currency: "BDT",
    })}<br/>
		<b>Amount:</b> ${s.toLocaleString("en-BD", {
      maximumFractionDigits: 2,
      style: "currency",
      currency: "BDT",
    })}<br/>
		<b>Charge:</b> ${t.toLocaleString("en-BD", {
      maximumFractionDigits: 2,
      style: "currency",
      currency: "BDT",
    })}<br/>
		<b>Vat:</b> ${u.toLocaleString("en-BD", {
      maximumFractionDigits: 2,
      style: "currency",
      currency: "BDT",
    })}<br/>
		</p>
		<h6 class="text-primary h6">Authorization</h6>
		<p>
		<b>Entry User:</b> From: ${l} At: ${moment(m).format(
              "MMMM Do YYYY, h:mm:ss a"
            )}<br/>
		<b>Checker User:</b> From: ${n} At: ${moment(o).format(
              "MMMM Do YYYY, h:mm:ss a"
            )}<br/>
		<b>Approved User:</b> From: ${p} At: ${moment(q).format(
              "MMMM Do YYYY, h:mm:ss a"
            )}<br/>
		</p>
		<h6 class="text-primary h6">Massage</h6>
		<p>
		<b>Bill No:</b> ${v} <br/>
		<b>Particular:</b> ${y} <br/>
		<b>Note:</b> ${B} <br/>
		</p>
		<h6 class="text-primary h6">Info</h6>
		<p>
		<b>Agent:</b> ${w} <br/>
		<b>Merchant:</b> ${x} <br/>
		<b>Tr Code:</b> ${z} <br/>
		<b>Hotkey:</b> ${A} <br/>
		</p>

	</div>
</div>
<div class="modal-footer">
<h6>Date: ${moment(c).format("MMMM Do YYYY, h:mm:ss a")}</h6>
</div>`
          })
          .join("")),
          document.getElementById("modal-id").classList.add("active")
      })
  },
  closeModel = () => {
    document.getElementById("modal-id").classList.remove("active")
  },
  search = () => {
    let a, b, c, d, e, f, g
    for (
      a = document.getElementById("search"),
        b = a.value.toUpperCase(),
        c = document.getElementById("timeline"),
        d = c.getElementsByTagName("tr"),
        f = 0;
      f < d.length;
      f++
    )
      (e = d[f].getElementsByTagName("td")[1]),
        e &&
          ((g = e.textContent || e.innerText),
          (d[f].style.display = -1 < g.toUpperCase().indexOf(b) ? "" : "none"))
  }
